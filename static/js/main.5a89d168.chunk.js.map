{"version":3,"sources":["components/ContactForm/ContactFormik.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.jsx","index.js","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css"],"names":["ContactFormik","initialValues","id","uuidv4","name","number","experience","licence","skills","validationSchema","Yup","shape","min","max","required","positive","integer","onSubmit","values","setSubmitting","props","contacts","some","contact","alert","formSubmitHandler","isSubmitting","className","s","contactForm","htmlFor","labelBlock","type","component","role","aria-labelledby","groupBlock","title","inputBox","value","button","disabled","length","Component","Filter","onChange","ContactList","filterContacts","filter","Object","val","toString","toLowerCase","includes","filteredContacts","this","contactList","map","item","join","onClick","deleteContact","App","state","changeFilter","target","setState","newContact","prevState","withoutDelContactArray","defaultProps","root","document","querySelector","ReactDOM","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.5a89d168.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nclass ContactFormik extends Component {\n    static propTypes = {\n        formSubmitHandler: PropTypes.func.isRequired,\n        contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n          name: PropTypes.string.isRequired,\n          number: PropTypes.string.isRequired,\n        })),\n    }\n\n    render() {\n        return <Formik\n          initialValues={{\n            id: uuidv4(),\n            name: '',\n            number:'',\n            experience: '',\n            licence: false,\n            skills: [],\n          }}\n          validationSchema={Yup.object().shape({\n            name: Yup.string().min(2, 'Too Short!').max(30, 'Too Long!').required('Required'),\n            number: Yup.number().max(1000000000000, 'Too Long!').positive().integer().required('Required'),\n          })\n          }\n          onSubmit={(values, { setSubmitting }) => {\n              const { name, number } = values;\n              if(this.props.contacts.some(contact => contact.name===name || contact.number===number) ){\n                alert(`Contact with such ${name} or ${number} is already in Phonebook`);\n                setSubmitting(false);\n                return;\n              }\n\n              this.props.formSubmitHandler(values);\n              setSubmitting(false);\n          }}\n        >\n       {({isSubmitting, values}) => (\n         <Form className={s.contactForm}>\n           <label htmlFor=\"name\">Name </label>\n           <Field className={s.labelBlock} type=\"text\" name=\"name\" />\n           <ErrorMessage name=\"name\" component=\"div\" />\n           <label htmlFor=\"number\">Number </label>\n           <Field className={s.labelBlock} type=\"text\" name=\"number\" />\n           <ErrorMessage name=\"number\" component=\"div\" />\n           <div  role=\"group\" aria-labelledby=\"radio-group\" className={`${s.labelBlock} ${s.groupBlock}`}>\n                <h3 className={s.title}>Your Level</h3>\n                <label>\n                  <Field type=\"radio\"  className={s.inputBox} name=\"experience\" value=\"junior\" />\n                    junior\n                </label>\n                <label>\n                  <Field type=\"radio\"  className={s.inputBox} name=\"experience\" value=\"middle\" />\n                    middle\n                </label>\n                <label>\n                  <Field type=\"radio\"  className={s.inputBox} name=\"experience\" value=\"senior\" />\n                    senior\n                </label>\n            </div>\n            <div role=\"group\" aria-labelledby=\"checkbox-group\" className={`${s.labelBlock} ${s.groupBlock}`}>\n              <h3 className={s.title}>Your Skills</h3>\n              <label>\n                <Field type=\"checkbox\"  className={s.inputBox} name=\"skills\" value=\"HTML\" />\n                HTML\n              </label>\n              <label>\n                <Field type=\"checkbox\"  className={s.inputBox} name=\"skills\" value=\"CSS\" />\n                CSS\n              </label>\n              <label>\n                <Field type=\"checkbox\"  className={s.inputBox} name=\"skills\" value=\"JS\" />\n                JS\n              </label>\n              <label>\n                <Field type=\"checkbox\"  className={s.inputBox} name=\"skills\" value=\"SCSS\" />\n                SCSS\n              </label>\n              <label>\n                <Field type=\"checkbox\"  className={s.inputBox} name=\"skills\" value=\"Git\" />\n                Git\n              </label>\n              <label>\n                <Field type=\"checkbox\"  className={s.inputBox} name=\"skills\" value=\"React\" />\n                React\n              </label>\n            </div>\n            <label className={s.labelBlock}>\n                <Field type=\"checkbox\"  className={s.inputBox} name=\"licence\" id=\"licence\" />\n                All data is right\n            </label>\n\n           <button type=\"submit\" className={s.button} disabled={isSubmitting || values.experience==='' || !values.licence || values.name==='' || values.number==='' || values.skills.length===0}>Add Contact</button>\n         </Form>\n       )}\n     </Formik>\n    }\n}\n\nexport default ContactFormik;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nfunction Filter ({value, onChange}) {\n        return <div className={s.labelBlock} >\n            <h4  className={s.title}>Find contacts by name, number or level</h4>\n            <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\n            </div>\n}\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nclass ContactList extends Component {\n    static propTypes = {\n      deleteContact: PropTypes.func.isRequired,\n      filter: PropTypes.string.isRequired,\n        contacts: PropTypes.arrayOf(\n          PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n            experience: PropTypes.string.isRequired,\n            skills: PropTypes.arrayOf(PropTypes.string.isRequired),\n        })),\n    }\n\n    filterContacts = () => {\n        const {contacts, filter} = this.props;\n        return contacts.filter(contact =>\n           Object.values(contact)\n            .some(val => val.toString().toLowerCase().includes(filter))\n        );\n    }\n\n    render() {\n        const filteredContacts = this.filterContacts();\n\n        return <ul className={s.contactList} >\n          {filteredContacts.map(({ id, name, number, experience, skills }) =>\n            <li key={id} className={s.item} >\n              <span>{name}:</span>\n              <span>{number},</span>\n              <span>{experience},</span>\n              <span>skills: {skills.join(', ')}</span>\n              <button type=\"button\" onClick={()=> this.props.deleteContact(id)} >Delete</button>\n            </li>)}\n        </ul>\n    }\n}\n\nexport default ContactList;","import React, { Component } from 'react';\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\n// import * as Yup from 'yup';\n// import { v4 as uuidv4 } from 'uuid';\nimport ContactFormik from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nclass App extends Component {\n    static defaultProps = {\n      contacts: [\n        {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56', experience: 'junior', skills: ['HTML', 'CSS']},\n        {id: 'id-2', name: 'Hermione Kline', number: '443-89-12', experience: 'middle', skills: ['HTML', 'CSS', 'JS']},\n        {id: 'id-3', name: 'Eden Clements', number: '645-17-79', experience: 'junior', skills: ['HTML', 'SCSS']},\n        {id: 'id-4', name: 'Annie Copeland', number: '227-91-26', experience: 'senior', skills: ['HTML', 'CSS', 'JS', 'React']},\n        {id: 'id-5', name: 'Ann Hits', number: '227-91-46', experience: 'junior', skills: ['JS']},\n        {id: 'id-6', name: 'Ed Clirence', number: '217-01-46', experience: 'middle', skills: ['HTML', 'CSS', 'JS']},\n      ],\n    }\n\n    static propTypes = {\n        //\n    }\n\n    state = {\n      contacts: this.props.contacts,\n      filter: '',\n    }\n\n    changeFilter = ({ target: {name, value} }) => {\n      this.setState({\n        [name]: value.toLowerCase(),\n      });\n    }\n\n    formSubmitHandler = (newContact) => {\n        this.setState((prevState) => {\n        return {\n          contacts: [...prevState.contacts, newContact]\n        }\n      })\n    }\n\n    deleteContact = (id) => {\n      this.setState((prevState) => {\n        const withoutDelContactArray = prevState.contacts.filter(contact => contact.id !==id)\n        return {\n          contacts: [...withoutDelContactArray]\n        }\n      })\n    }\n\n    render() {\n      const { contacts, filter } = this.state;\n\n      return (<>\n        <h1 className=\"title\">Phonebook</h1>\n        {/* <ContactForm onSubmit={this.formSubmitHandler} contacts={contacts} /> */}\n        <ContactFormik formSubmitHandler={this.formSubmitHandler} contacts={contacts}/>\n        {/* <Formik\n          initialValues={{\n            id: uuidv4(),\n            name: '',\n            number:'',\n            experience: '',\n            licence: false,\n            skills: [],\n          }}\n          validationSchema={Yup.object().shape({\n            name: Yup.string().min(2, 'Too Short!').max(30, 'Too Long!').required('Required'),\n            number: Yup.number().positive().integer().required('Required'),\n          })\n          }\n          onSubmit={(values, { setSubmitting }) => {\n              this.formSubmitHandler(values);\n              setSubmitting(false);\n          }}\n        >\n       {({isSubmitting, values}) => (\n         <Form>\n           <label htmlFor=\"name\">Name</label>\n           <Field type=\"text\" name=\"name\" />\n           <ErrorMessage name=\"name\" component=\"div\" />\n           <label htmlFor=\"number\">Number</label>\n           <Field type=\"text\" name=\"number\" />\n           <ErrorMessage name=\"number\" component=\"div\" />\n           <div  role=\"group\" aria-labelledby=\"radio-group\">\n                <h3>Your Level</h3>\n                <label>\n                  <Field type=\"radio\" name=\"experience\" value=\"junior\" />\n                    junior\n                </label>\n                <label>\n                  <Field type=\"radio\" name=\"experience\" value=\"middle\" />\n                    middle\n                </label>\n                <label>\n                  <Field type=\"radio\" name=\"experience\" value=\"senior\" />\n                    senior\n                </label>\n            </div>\n            <div role=\"group\" aria-labelledby=\"checkbox-group\">\n              <h3>Your Skills</h3>\n              <label>\n                <Field type=\"checkbox\" name=\"skills\" value=\"HTML\" />\n                HTML\n              </label>\n              <label>\n                <Field type=\"checkbox\" name=\"skills\" value=\"CSS\" />\n                CSS\n              </label>\n              <label>\n                <Field type=\"checkbox\" name=\"skills\" value=\"JS\" />\n                JS\n              </label>\n              <label>\n                <Field type=\"checkbox\" name=\"skills\" value=\"SCSS\" />\n                SCSS\n              </label>\n              <label>\n                <Field type=\"checkbox\" name=\"skills\" value=\"Git\" />\n                Git\n              </label>\n              <label>\n                <Field type=\"checkbox\" name=\"skills\" value=\"React\" />\n                React\n              </label>\n            </div>\n            <label>\n                <Field type=\"checkbox\" name=\"licence\" id=\"licence\" />\n                Agree with Licence\n            </label>\n\n           <button type=\"submit\" disabled={isSubmitting || values.experience==='' || !values.licence || values.name==='' || values.number==='' || values.skills.length===0}>Add Contact</button>\n         </Form>\n       )}\n     </Formik> */}\n        <h2 className=\"title\">Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList contacts={contacts} filter={filter} deleteContact={this.deleteContact} />\n        </>\n        )\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nconst root = document.querySelector('#root');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  root,\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelBlock\":\"Filter_labelBlock__17eMJ\",\"title\":\"Filter_title__mtLuE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3MzlG\",\"item\":\"ContactList_item__3YsZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__OrlO3\",\"labelBlock\":\"ContactForm_labelBlock__f81Qb\",\"groupBlock\":\"ContactForm_groupBlock__q7zFY\",\"title\":\"ContactForm_title__3MqSl\",\"inputBox\":\"ContactForm_inputBox__1nc3p\",\"button\":\"ContactForm_button__1MLZK\"};"],"sourceRoot":""}